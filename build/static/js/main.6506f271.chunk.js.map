{"version":3,"sources":["images/Alpha.png","card.js","App.js","index.js"],"names":["Card","onClick","card","index","isInactive","isFlipped","isDisabled","className","classnames","src","alpha","alt","uniqueElementsArray","type","shuffleCards","array","i","length","randomIndex","Math","floor","random","currentIndex","temp","App","useState","bind","concat","cards","openCards","setOpenCards","clearedCards","setClearedCards","shouldDisableAllCards","setShouldDisableAllCards","moves","setMoves","showModal","setShowModal","JSON","parse","localStorage","getItem","Number","POSITIVE_INFINITY","bestScore","setBestScore","timeout","useRef","evaluate","first","second","prev","current","setTimeout","handleCardClick","clearTimeout","useEffect","Object","keys","highScore","min","setItem","checkCompletion","checkIsFlipped","includes","window","onbeforeunload","event","e","preventDefault","returnValue","checkIsInactive","Boolean","map","Dialog","open","disableBackdropClick","disableEscapeKeyDown","DialogTitle","id","DialogContent","DialogContentText","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6506f271.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Alpha.5f594f64.png\";","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport alpha from \"./images/Alpha.png\";\r\nimport \"./card.scss\";\r\n\r\nconst Card = ({ onClick, card, index, isInactive, isFlipped, isDisabled }) => {\r\n  const handleClick = () => {\r\n    !isFlipped && !isDisabled && onClick(index);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classnames(\"card\", {\r\n        \"is-flipped\": isFlipped,\r\n        \"is-inactive\": isInactive\r\n      })}\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"card-face card-font-face\">\r\n        <img src={alpha} alt=\"alpha\" />\r\n      </div>\r\n      <div className=\"card-face card-back-face\">\r\n        <img src={card.src} alt=\"alpha\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  Button,\r\n  DialogTitle\r\n} from \"@material-ui/core\";\r\nimport Card from \"./card\";\r\nimport \"./app.scss\";\r\n\r\nconst uniqueElementsArray = [\r\n  {\r\n    type: \"A\",\r\n    src:  '/A.png'\r\n  },\r\n  {\r\n    type: \"B\",\r\n    src: '/B.png'\r\n  },\r\n  {\r\n    type: \"C\",\r\n    src: '/C.png'\r\n  },\r\n  {\r\n    type: \"D\",\r\n    src: '/D.png'\r\n  },\r\n  {\r\n    type: \"E\",\r\n    src: '/E.png'\r\n  },\r\n  {\r\n    type: \"F\",\r\n    src: '/F.png'\r\n  },\r\n  {\r\n    type: \"G\",\r\n    src: '/G.png'\r\n  },\r\n  {\r\n    type: \"H\",\r\n    src: '/H.png'\r\n  }\r\n];\r\n\r\nfunction shuffleCards(array) {\r\n  const length = array.length;\r\n  for (let i = length; i > 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * i);\r\n    const currentIndex = i - 1;\r\n    const temp = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temp;\r\n  }\r\n  return array;\r\n}\r\nexport default function App() {\r\n  const [cards, setCards] = useState(\r\n    shuffleCards.bind(null, uniqueElementsArray.concat(uniqueElementsArray))\r\n  );\r\n  const [openCards, setOpenCards] = useState([]);\r\n  const [clearedCards, setClearedCards] = useState({});\r\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\r\n  const [moves, setMoves] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [bestScore, setBestScore] = useState(\r\n    JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY\r\n  );\r\n  const timeout = useRef(null);\r\n\r\n  const disable = () => {\r\n    setShouldDisableAllCards(true);\r\n  };\r\n  const enable = () => {\r\n    setShouldDisableAllCards(false);\r\n  };\r\n\r\n  const checkCompletion = () => {\r\n    if (Object.keys(clearedCards).length === uniqueElementsArray.length) {\r\n      setShowModal(true);\r\n      const highScore = Math.min(moves, bestScore);\r\n      setBestScore(highScore);\r\n      localStorage.setItem(\"bestScore\", highScore);\r\n    }\r\n  };\r\n  const evaluate = () => {\r\n    const [first, second] = openCards;\r\n    enable();\r\n    if (cards[first].type === cards[second].type) {\r\n      setClearedCards((prev) => ({ ...prev, [cards[first].type]: true }));\r\n      setOpenCards([]);\r\n      return;\r\n    }\r\n    // This is to flip the cards back after 500ms duration\r\n    timeout.current = setTimeout(() => {\r\n      setOpenCards([]);\r\n    }, 500);\r\n  };\r\n  const handleCardClick = (index) => {\r\n    if (openCards.length === 1) {\r\n      setOpenCards((prev) => [...prev, index]);\r\n      setMoves((moves) => moves + 1);\r\n      disable();\r\n    } else {\r\n      clearTimeout(timeout.current);\r\n      setOpenCards([index]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timeout = null;\r\n    if (openCards.length === 2) {\r\n      timeout = setTimeout(evaluate, 300);\r\n    }\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [openCards]);\r\n\r\n  useEffect(() => {\r\n    checkCompletion();\r\n  }, [clearedCards]);\r\n  const checkIsFlipped = (index) => {\r\n    return openCards.includes(index);\r\n  };\r\n\r\n  window.onbeforeunload = (event) => {\r\n    const e = event || window.event;\r\n    // Cancel the event\r\n    e.preventDefault();\r\n    if (e) {\r\n      e.returnValue = ''; // Legacy method for cross browser support\r\n    }\r\n    return ''; // Legacy method for cross browser support\r\n  };\r\n  \r\n\r\n  const checkIsInactive = (card) => {\r\n    return Boolean(clearedCards[card.type]);\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setClearedCards({});\r\n    setOpenCards([]);\r\n    setShowModal(false);\r\n    setMoves(0);\r\n    setShouldDisableAllCards(false);\r\n    // set a shuffled deck of cards\r\n    setCards(shuffleCards(uniqueElementsArray.concat(uniqueElementsArray)));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h3>Play the Flip card game</h3>\r\n        <div>\r\n          Select two cards with same content consequtively to make them vanish\r\n        </div>\r\n      </header>\r\n      <div className=\"container\">\r\n        {cards.map((card, index) => {\r\n          return (\r\n            <Card\r\n              key={index}\r\n              card={card}\r\n              index={index}\r\n              isDisabled={shouldDisableAllCards}\r\n              isInactive={checkIsInactive(card)}\r\n              isFlipped={checkIsFlipped(index)}\r\n              onClick={handleCardClick}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <footer>\r\n        <div className=\"score\">\r\n          <div className=\"moves\">\r\n            <span className=\"bold\">ATTEMPTS:</span> {moves}\r\n          </div>\r\n          {localStorage.getItem(\"bestScore\") && (\r\n            <div className=\"high-score\">\r\n              <span className=\"bold\">Best Score:</span> {bestScore}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {/* <div className=\"restart\">\r\n          <Button onClick={handleRestart} color=\"primary\" variant=\"contained\">\r\n            Restart\r\n          </Button>\r\n        </div> */}\r\n      </footer>\r\n      <Dialog\r\n        open={showModal}\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          Hurray!!! You completed the challenge\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            You completed the game in {moves} moves. Your best score is{\" \"}\r\n            {bestScore} moves.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        {/* <DialogActions>\r\n          <Button onClick={handleRestart} color=\"primary\">\r\n            Restart\r\n          </Button>\r\n        </DialogActions> */}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}